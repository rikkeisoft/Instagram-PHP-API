{"name":"Instagram PHP API","tagline":"An easy-to-use PHP Class & CakePHP's Component for accessing Instagram's API.","body":"# ![Image](https://raw.github.com/rikkeisoft/Instagram-PHP-API/master/example/assets/instagram.png) Instagram PHP API V2\r\n\r\n## About\r\n\r\nA PHP wrapper class & CakePHP's Component for the Instagram API.  \r\nFeedback or bug reports are appreciated.\r\n\r\n> Supports [Instagram video](#instagram-videos) responses.\r\n\r\n## Requirements\r\n\r\n- PHP 5.2.x or higher\r\n- cURL\r\n- Registered Instagram App\r\n\r\n## Get started\r\n\r\n[Register your application](http://instagr.am/developer/register/) with Instagram, and receive your OAuth `client_id` and `client_secret`.  \r\nTake a look at the [uri guidlines](#samples-for-redirect-urls) before registering a redirect URI.\r\n\r\n> A good place to get started is the example App.\r\n\r\n### Initialize the class\r\n\r\n```php\r\n<?php\r\n    require_once 'instagram.class.php';\r\n    \r\n    $instagram = new Instagram(array(\r\n      'apiKey'      => 'YOUR_APP_KEY',\r\n      'apiSecret'   => 'YOUR_APP_SECRET',\r\n      'apiCallback' => 'YOUR_APP_CALLBACK'\r\n    ));\r\n    \r\n    echo \"<a href='{$instagram->getLoginUrl()}'>Login with Instagram</a>\";\r\n?>\r\n```\r\n\r\n### Authenticate user (OAuth2)\r\n\r\n```php\r\n<?php\r\n    // Grab OAuth callback code\r\n    $code = $_GET['code'];\r\n    $data = $instagram->getOAuthToken($code);\r\n    \r\n    echo 'Your username is: ' . $data->user->username;\r\n?>\r\n```\r\n\r\n### Get user likes\r\n\r\n```php\r\n<?php\r\n    // Store user access token\r\n    $instagram->setAccessToken($data);\r\n    \r\n    // Get all user likes\r\n    $likes = $instagram->getUserLikes();\r\n    \r\n    // Take a look at the API response\r\n    echo '<pre>';\r\n    print_r($likes);\r\n    echo '<pre>';\r\n?>\r\n```\r\n\r\n**All methods return the API data `json_decode()` - so you can directly access the data.**\r\n\r\n## Available methods\r\n\r\n### Setup Instagram\r\n\r\n`new Instagram(<array>/<string>);`\r\n\r\n`array` if you want to authenticate a user and access its data:\r\n\r\n```php\r\nnew Instagram(array(\r\n  'apiKey'      => 'YOUR_APP_KEY',\r\n  'apiSecret'   => 'YOUR_APP_SECRET',\r\n  'apiCallback' => 'YOUR_APP_CALLBACK'\r\n));\r\n```\r\n\r\n`string` if you *only* want to access public data:\r\n\r\n```php\r\nnew Instagram('YOUR_APP_KEY');\r\n```\r\n\r\n### Get login URL\r\n\r\n`getLoginUrl(<array>)`\r\n\r\n```php\r\ngetLoginUrl(array(\r\n  'basic',\r\n  'likes'\r\n));\r\n```\r\n\r\n**Optional scope parameters:**\r\n\r\n<table>\r\n  <tr>\r\n    <th>Scope</th>\r\n    <th>Legend</th>\r\n    <th>Methods</th>\r\n  </tr>\r\n  <tr>\r\n    <td><code>basic</code></td>\r\n    <td>to use all user related methods [default]</td>\r\n    <td><code>getUser()</code>, <code>getUserFeed()</code>, <code>getUserFollower()</code> etc.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>relationships</code></td>\r\n    <td>to follow and unfollow users</td>\r\n    <td><code>modifyRelationship()</code></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>likes</code></td>\r\n    <td>to like and unlike items</td>\r\n    <td><code>getMediaLikes()</code>, <code>likeMedia()</code>, <code>deleteLikedMedia()</code></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>comments</code></td>\r\n    <td>to create or delete comments</td>\r\n    <td><code>getMediaComments()</code>, <code>addMediaComment()</code>, <code>deleteMediaComment()</code></td>\r\n  </tr>\r\n</table>\r\n\r\n### Get OAuth token\r\n\r\n`getOAuthToken($code, <true>/<false>)`\r\n\r\n`true` : Returns only the OAuth token  \r\n`false` *[default]* : Returns OAuth token and profile data of the authenticated user\r\n\r\n### Set / Get access token\r\n\r\nStores access token, for further method calls:  \r\n`setAccessToken($token)`\r\n\r\nReturns access token, if you want to store it for later usage:  \r\n`getAccessToken()`\r\n\r\n### User methods\r\n\r\n**Public methods**\r\n\r\n- `getUser($id)`\r\n- `searchUser($name, <$limit>)`\r\n- `getUserMedia($id, <$limit>)`\r\n\r\n**Authenticated methods**\r\n\r\n- `getUser()`\r\n- `getUserLikes(<$limit>)`\r\n- `getUserFeed(<$limit>)`\r\n- `getUserMedia(<$id>, <$limit>)`\r\n    - if an `$id` isn't defined, it returns the media of the logged in user\r\n\r\n> [Sample responses of the User Endpoints.](http://instagram.com/developer/endpoints/users/)\r\n\r\n### Relationship methods\r\n\r\n**Authenticated methods**\r\n\r\n- `getUserFollows($id, <$limit>)`\r\n- `getUserFollower($id, <$limit>)`\r\n- `getUserRelationship($id)`\r\n- `modifyRelationship($action, $user)`\r\n    - `$action` : Action command (follow / unfollow / block / unblock / approve / deny)\r\n    - `$user` : Target user id\r\n\r\n```php\r\n<?php\r\n    // Follow the user with the ID 1574083\r\n    $instagram->modifyRelationship('follow', 1574083);\r\n?>\r\n```\r\n\r\n---\r\n\r\nPlease note that the `modifyRelationship()` method requires the `relationships` [scope](#get-login-url).\r\n\r\n---\r\n\r\n> [Sample responses of the Relationship Endpoints.](http://instagram.com/developer/endpoints/relationships/)\r\n\r\n### Media methods\r\n\r\n**Public methods**\r\n\r\n- `getMedia($id)`\r\n- `getPopularMedia()`\r\n- `searchMedia($lat, $lng, <$distance>, <$minTimestamp>, <$maxTimestamp>)`\r\n    - `$lat` and `$lng` are coordinates and have to be floats like: `48.145441892290336`,`11.568603515625`\r\n    - `$distance` Radial distance in meter (default is 1km = 1000, max. is 5km = 5000)\r\n    - `$minTimestamp` All media returned will be taken *later* than this timestamp (default: 5 days ago)\r\n    - `$maxTimestamp` All media returned will be taken *earlier* than this timestamp (default: now)\r\n\r\n> [Sample responses of the Media Endpoints.](http://instagram.com/developer/endpoints/media/)\r\n\r\n### Comment methods\r\n\r\n**Public methods**\r\n\r\n- `getMediaComments($id)`\r\n\r\n**Authenticated methods**\r\n\r\n- `addMediaComment($id, $text)`\r\n    - **restricted access:** please email `apidevelopers[at]instagram.com` for access\r\n- `deleteMediaComment($id, $commentID)`\r\n    - the comment must be authored by the authenticated user\r\n\r\n---\r\n\r\nPlease note that the authenticated methods require the `comments` [scope](#get-login-url).\r\n\r\n---\r\n\r\n> [Sample responses of the Comment Endpoints.](http://instagram.com/developer/endpoints/comments/)\r\n\r\n### Tag methods\r\n\r\n**Public methods**\r\n\r\n- `getTag($name)`\r\n- `getTagMedia($name)`\r\n- `searchTags($name)`\r\n\r\n> [Sample responses of the Tag Endpoints.](http://instagram.com/developer/endpoints/tags/)\r\n\r\n### Likes methods\r\n\r\n**Authenticated methods**\r\n\r\n- `getMediaLikes($id)`\r\n- `likeMedia($id)`\r\n- `deleteLikedMedia($id)`\r\n\r\n> How to like a Media: [Example usage](https://gist.github.com/3287237)  \r\n> [Sample responses of the Likes Endpoints.](http://instagram.com/developer/endpoints/likes/)\r\n\r\nAll `<...>` parameters are optional. If the limit is undefined, all available results will be returned.\r\n\r\n## Instagram videos\r\n\r\nInstagram entries are marked with a `type` attribute (`image` or `video`), that allows you to identify videos.\r\n\r\nAn example of how to embed Instagram videos by using [Video.js](http://www.videojs.com), can be found in the `/example` folder.  \r\n\r\n---\r\n\r\n**Please note:** Instagram currently doesn't allow to filter videos.\r\n\r\n---\r\n\r\n## Pagination\r\n\r\nEach endpoint has a maximum range of results, so increasing the `limit` parameter above the limit won't help (e.g. `getUserMedia()` has a limit of 90).\r\n\r\nThat's the point where the \"pagination\" feature comes into play.  \r\nSimply pass an object into the `pagination()` method and receive your next dataset:\r\n\r\n```php\r\n<?php\r\n    $photos = $instagram->getTagMedia('kitten');\r\n\r\n    $result = $instagram->pagination($photos);\r\n?>\r\n```\r\n\r\nIteration with `do-while` loop.\r\n\r\n## Samples for redirect URLs\r\n\r\n<table>\r\n  <tr>\r\n    <th>Registered Redirect URI</th>\r\n    <th>Redirect URI sent to /authorize</th>\r\n    <th>Valid?</th>\r\n  </tr>\r\n  <tr>\r\n    <td>http://yourcallback.com/</td>\r\n    <td>http://yourcallback.com/</td>\r\n    <td>yes</td>\r\n  </tr>\r\n  <tr>\r\n    <td>http://yourcallback.com/</td>\r\n    <td>http://yourcallback.com/?this=that</td>\r\n    <td>yes</td>\r\n  </tr>\r\n  <tr>\r\n    <td>http://yourcallback.com/?this=that</td>\r\n    <td>http://yourcallback.com/</td>\r\n    <td>no</td>\r\n  </tr>\r\n  <tr>\r\n    <td>http://yourcallback.com/?this=that</td>\r\n    <td>http://yourcallback.com/?this=that&another=true</td>\r\n    <td>yes</td>\r\n  </tr>\r\n  <tr>\r\n    <td>http://yourcallback.com/?this=that</td>\r\n    <td>http://yourcallback.com/?another=true&this=that</td>\r\n    <td>no</td>\r\n  </tr>\r\n  <tr>\r\n    <td>http://yourcallback.com/callback</td>\r\n    <td>http://yourcallback.com/</td>\r\n    <td>no</td>\r\n  </tr>\r\n  <tr>\r\n    <td>http://yourcallback.com/callback</td>\r\n    <td>http://yourcallback.com/callback/?type=mobile</td>\r\n    <td>yes</td>\r\n  </tr>\r\n</table>\r\n\r\n> If you need further information about an endpoint, take a look at the [Instagram API docs](http://instagram.com/developer/authentication/).\r\n\r\n## Example App\r\n\r\n![Image](http://cl.ly/image/221T1g3w3u2J/preview.png)\r\n\r\nThis example project, located in the `example/` folder, helps you to get started.  \r\nThe code is well documented and takes you through all required steps of the OAuth2 process.  \r\nCredit for the awesome Instagram icons goes to [Ricardo de Zoete Pro](http://dribbble.com/RZDESIGN).\r\n\r\n#### More examples and tutorials:\r\n\r\n- [User likes](https://gist.github.com/cosenary/3287237)\r\n- [Follow user](https://gist.github.com/cosenary/8322459)\r\n- [User follower](https://gist.github.com/cosenary/7267139)\r\n- [Load more button](https://gist.github.com/cosenary/2975779)\r\n- [User most recent media](https://gist.github.com/cosenary/1711218)\r\n- [Instagram login](https://gist.github.com/cosenary/8803601)\r\n- [Instagram signup (9lessons tutorial)](http://www.9lessons.info/2012/05/login-with-instagram-php.html)\r\n\r\n> Let me know if you have to share a code example, too.\r\n\r\n## History\r\n\r\n**Instagram 2.2 - 29/09/2014**\r\n- Add `verifyAccessToken` function\r\n- Add CakePHP's Component version\r\n\r\n**Instagram 2.1 - 30/01/2014**\r\n\r\n- `update` added min and max_timestamp to `searchMedia()`\r\n- `update` public authentication for `getUserMedia()` method\r\n- `fix` support for inconsistent pagination return type (*relationship endpoint*)\r\n\r\n**Instagram 2.0 - 24/12/2013**\r\n\r\n- `release` version 2.0\r\n\r\n**Instagram 2.0 beta - 20/11/2013**\r\n\r\n- `feature` Added *Locations* endpoint\r\n- `update` Updated example project to display Instagram videos\r\n\r\n**Instagram 2.0 alpha 4 - 01/11/2013**\r\n\r\n- `feature` Comment endpoint implemented\r\n- `feature` New example with a fancy GUI\r\n- `update` Improved documentation\r\n\r\n**Instagram 2.0 alpha 3 - 04/09/2013**\r\n\r\n- `merge` Merged master branch updates\r\n    - `update` Updated documentation\r\n    - `bug` / `change` cURL CURLOPT_SSL_VERIFYPEER disabled (fixes #6, #7, #8, #16)\r\n    - `feature` Added cURL error message\r\n    - `feature` Added `limit` to `getTagMedia()` method\r\n\r\n**Instagram 2.0 alpha 2 - 14/06/2013**\r\n\r\n- `feature` Improved Pagination functionality\r\n- `change` Added `distance` parameter to `searchMedia()` method (thanks @jonathanwkelly)\r\n\r\n**Instagram 2.0 alpha 1 - 28/05/2012**\r\n\r\n- `feature` Added Pagination method\r\n- `feature` Added User Relationship endpoints\r\n- `feature` Added scope parameter table for the `getLoginUrl()` method\r\n\r\n**Instagram 1.5 - 31/01/2012**\r\n\r\n- `release` Second master version\r\n- `feature` Added Tag endpoints\r\n- `change` Edited the \"Get started\" example\r\n- `change` Now you can pass the `getOAuthToken()` object directly into `setAccessToken()`\r\n\r\n**Instagram 1.0 - 20/11/2011**\r\n\r\n- `release` First public release\r\n- `feature` Added sample App with documented code\r\n- `update` New detailed documentation\r\n\r\n**Instagram 0.8 - 16/11/2011**\r\n\r\n- `release` First inital released version\r\n- `feature` Initialize the class with a config array or string (see example)\r\n\r\n**Instagram 0.5 - 12/11/2011**\r\n\r\n- `release` Beta version\r\n- `update` Small documentation\r\n\r\n## Credits\r\n\r\nCopyright (c) 2011-2014 - Programmed by Christian Metz  \r\nReleased under the [BSD License](http://www.opensource.org/licenses/bsd-license.php).\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/cosenary/instagram-php-api/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}